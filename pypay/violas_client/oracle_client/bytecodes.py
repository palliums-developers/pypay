from enum import IntEnum
from violas_client.lbrtypes.transaction.script import Script
from violas_client.lbrtypes.bytecode import gen_hex_hash
from violas_client.move_core_types.account_address import AccountAddress
from violas_client.lbrtypes.bytecode import CodeType as LibraCodeType


class CodeType(IntEnum):
    ORACLE = 60001
    TEST_EXCHANGE_RATE = 60002
    UPDATE_EXCHANGE_RATE = 60003

bytecodes = {
    "oracle": b"\xa1\x1c\xeb\x0b\x01\x00\x00\x00\r\x01\x00\x0e\x02\x0e\x12\x03 >\x04^\n\x05hQ\x07\xb9\x01\xbd\x02\x08\xf6\x03\x10\x06\x86\x04\x14\n\x9a\x04\x19\x0b\xb3\x04\x02\x0c\xb5\x04\xa8\x01\r\xdd\x05\x06\x0e\xe3\x05\x06\x00\x00\x00\x01\x00\x02\x00\x03\x00\x04\x00\x05\x00\x06\x00\x07\x01\x01\x01\x00\x08\x02\x00\x03\x03\x02\x00\x02\x0e\x01\x01\x02\x03\t\x00\x01\x00\x04\n\x02\x03\x01\x01\x04\x0b\x02\x04\x01\x01\x06\x0c\x05\x06\x00\x05\r\x02\x07\x00\x02\x0f\x08\x02\x01\x02\x02\x10\x05\t\x01\x02\x01\x11\x02\x06\x00\x00\x12\n\x02\x01\x01\x00\x13\x02\x0b\x01\x01\x00\x14\x0c\x02\x01\x01\x01\r\x05\x0e\x02\r\x06\x0e\x08\r\x02\x03\x03\x01\x08\x02\x00\x01\n\x02\x01\x01\x01\x06\x0c\x01\x05\x01\x03\x02\x07\x0b\x03\x01\t\x00\t\x00\x01\x0b\x03\x01\t\x00\x01\x07\x0b\x00\x01\t\x00\x02\x08\x02\x03\x03\x06\x0c\x03\x03\x01\t\x00\x01\x08\x01\x03\x06\x0b\x00\x01\t\x00\x01\x03\x06\x0b\x00\x01\t\x00\x07\x0b\x00\x01\t\x00\x01\x03\x01\x03\x06Oracle\rCoreAddresses\x05Event\x0cFixedPoint32\x05Libra\x0eLibraTimestamp\x06Signer\x0cExchangeRate\x0bUpdateEvent\x14create_from_rational\rcurrency_code\x0bis_currency\naddress_of\x10now_microseconds\x0bEventHandle\nemit_event\x10new_event_handle\x12LIBRA_ROOT_ADDRESS\x14emit_updating_events\x11get_exchange_rate\x14update_exchange_rate\x05value\ttimestamp\rupdate_events\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x03\x08\x00\x00\x00\x00\x00\x00\x00\x00\x03\x08\x01\x00\x00\x00\x00\x00\x00\x00\x00\x02\x03\x15\x08\x02\x16\x03\x17\x0b\x03\x01\x08\x01\x01\x02\x03\x15\x08\x02\x16\x03\n\n\x02\x00\r\x08\x00\x00\x02\x0c\n\x006\x00\n\x007\x01\x14\x0b\x007\x02\x148\x00\x12\x018\x01\x02\t\x01\x01\x00\x0f\x108\x02\x0c\x01\x0b\x01\x03\x06\x07\x01'\x11\x07=\x00\x0c\x00\n\x007\x01\x14\x0b\x007\x02\x14\x02\n\x01\x01\x00\x108\n\x00\x11\x03\x11\x07!\x0c\x05\x0b\x05\x03\x0b\x0b\x00\x01\x07\x00'8\x02\x0c\x07\x0b\x07\x03\x13\x0b\x00\x01\x07\x01'\x11\x07;\x00 \x03\x18\x05&\n\x01\n\x02\x11\x00\x11\x04\n\x008\x039\x00\x0c\x03\r\x038\x04\x0b\x00\x0b\x03?\x00\x057\x0b\x00\x01\x11\x07<\x00\x0c\x04\n\x01\n\x02\x11\x00\n\x046\x01\x15\x11\x04\n\x046\x02\x15\x0b\x048\x04\x02\x00\x02\x00\x00\x00\x01\x00\r\x01\r\x02\r\x00",
    "test_exchange_rate": b"\xa1\x1c\xeb\x0b\x01\x00\x00\x00\x07\x01\x00\x04\x02\x04\x04\x03\x08\x10\x04\x18\x04\x05\x1c\x1d\x079>\x08w\x10\x00\x00\x00\x01\x00\x00\x02\x00\x00\x02\x00\x01\x00\x00\x03\x00\x01\x00\x01\x04\x02\x03\x01\x01\x02\x06\x02\x07\x02\x03\x08\x00\x01\x03\x00\x02\x08\x00\x03\x02\x03\x03\x06\x03\x03\x08\x00\x08\x00\x01\x03\x01\t\x00\x01\t\x01\x0cFixedPoint32\x06Oracle\ndivide_u64\x0cmultiply_u64\x11get_exchange_rate\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x02\x01\x01\x04\x05\x178\x00\x01\x0c\x04\n\x00\x0b\x04\x11\x01\x0c\x028\x01\x01\x0c\x05\n\x02\x0b\x05\x11\x00\x0c\x03\n\x01\n\x03!\x0c\x06\x0b\x06\x03\x16\x06\xea\x03\x00\x00\x00\x00\x00\x00'\x02",
    "update_exchange_rate": b'\xa1\x1c\xeb\x0b\x01\x00\x00\x00\x06\x01\x00\x02\x03\x02\x06\x04\x08\x02\x05\n\t\x07\x13\x1c\x08/\x10\x00\x00\x00\x01\x00\x01\x01\x01\x00\x02\x03\x06\x0c\x03\x03\x00\x01\t\x00\x06Oracle\x14update_exchange_rate\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x00\x01\x05\x0b\x00\n\x01\n\x028\x00\x02',
}

def gen_script(code_type, *args, ty_args=None):
    code = None
    if code_type == CodeType.ORACLE:
        code = bytecodes.get("oracle")
    if code_type == CodeType.TEST_EXCHANGE_RATE:
        code = bytecodes.get("test_exchange_rate")
    if code_type == CodeType.UPDATE_EXCHANGE_RATE:
        code = bytecodes.get("update_exchange_rate")
    if code is not None:
        return Script(code, ty_args, list(args))

type_to_code_map = {
    CodeType.ORACLE: bytecodes["oracle"],
    CodeType.TEST_EXCHANGE_RATE: bytecodes["test_exchange_rate"],
    CodeType.UPDATE_EXCHANGE_RATE: bytecodes["update_exchange_rate"],

}

hash_to_type_map = { gen_hex_hash(v): k for k, v in type_to_code_map.items()}

def get_code_type(code_hash: bytes):
    if isinstance(code_hash, bytes):
        code_hash = code_hash.hex()
    m = hash_to_type_map
    type = m.get(code_hash)
    if type is not None:
        return type
    return LibraCodeType.UNKNOWN


def get_code(type):
    return type_to_code_map.get(type)
